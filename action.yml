name: 'Cache checkout and build'
description: 'Checkout a repo and cache build for faster installation next time'
inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
  cmake-flags:
    description: 'Flags to pass to cmake'
    default: ''
outputs:
  cache-restore-hit:
    description: 'Whether the cache was hit or not'
    value: ${{ steps.restore.outputs.cache-hit }}
  cache-save-hit:
    description: 'Whether the cache was hit or not'
    value: ${{ steps.save.outputs.cache-hit }}
  latest-ref:
    description: 'The latest ref of the repository'
    value: ${{ steps.latest-ref.outputs.latest-ref }}
runs:
  using: "composite"
  steps:
    - name: Get latest ref
      id: latest-ref
      shell: bash
      run: |
        echo "latest-ref=$( curl -s https://api.github.com/repos/${{ inputs.repository }}/commits/master | jq -r '.sha' )" >> $GITHUB_OUTPUT
        echo "repo-name=$( curl -s https://api.github.com/repos/${{ inputs.repository }} | jq -r '.name' )" >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
    - name: Restore build from cache
      id: restore
      uses: actions/cache/restore@v3
      env:
        cache-name: cache-${{ steps.latest-ref.outputs.repo-name }}
      with:
        path: ${{ github.workspace }}/${{ steps.latest-ref.outputs.repo-name }}${{ inputs.ref }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.latest-ref.outputs.latest-ref }}
    - if: steps.restore.outputs.cache-hit != 'true'
      name: Checkout repo
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        path: ${{ steps.latest-ref.outputs.repo-name }}${{ inputs.ref }}/git
    - if: steps.restore.outputs.cache-hit != 'true'
      name: Build repo
      shell: bash
      run: cd $GITHUB_WORKSPACE/${{ steps.latest-ref.outputs.repo-name }}${{ inputs.ref }} && mkdir -p build && cd build && cmake ${{ inputs.cmake-flags }} ../git && make
    - if: steps.restore.outputs.cache-hit != 'true'
      name: Save build to cache
      id: save
      uses: actions/cache/save@v3
      env:
        cache-name: cache-${{ steps.latest-ref.outputs.repo-name }}
      with:
        path: ${{ github.workspace }}/${{ steps.latest-ref.outputs.repo-name }}${{ inputs.ref }}
        key: ${{ steps.restore.outputs.cache-primary-key }}
    - name: Install 
      shell: bash
      run: cd $GITHUB_WORKSPACE/${{ steps.latest-ref.outputs.repo-name }}${{ inputs.ref }}/build && sudo make install
