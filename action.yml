name: 'Cache checkout and build'
description: 'Checkout a repo and cache build for faster installation next time'
inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.
    default: ''
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
  cmake-flags:
    description: 'Flags to pass to cmake on build'
    default: ''
  build-flags:
    description: 'Flags to pass to cmake --build on build'
    default: ''
  pre-build-command:
    description: 'Command to run before building'
    default: ''
  shell:
    description: 'The shell to use for the build steps'
    value: 'bash'
outputs:
  cache-restore-hit:
    description: 'Whether the cache was hit or not on restore'
    value: ${{ steps.restore.outputs.cache-hit }}
  cache-save-hit:
    description: 'Whether the cache was hit or not on save'
    value: ${{ steps.save.outputs.cache-hit }}
  latest-ref:
    description: 'The latest ref of the repository (sha)'
    value: ${{ steps.latest-ref.outputs.latest-ref }}
runs:
  using: "composite"
  steps:
  - name: Validate chosen ref
    id: chosen-ref
    shell: bash
    run: |
      if [ -z "${{ inputs.ref }}" ]; then
        echo "ref=$( curl -s https://api.github.com/repos/${{ inputs.repository }} --header "Authorization: token ${{ inputs.token }}" | jq -r '.default_branch' )" >> $GITHUB_OUTPUT
      else
        echo "ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
      fi
      cat $GITHUB_OUTPUT
  - name: Get latest ref
    id: latest-ref
    shell: bash
    run: |
      remaining=`curl -i https://api.github.com/ --header "Authorization: token ${{ inputs.token }}" | grep x-ratelimit-remaining` 2> /dev/null
      echo "Remaining requests: $remaining"
      if [ "$remaining" == "x-ratelimit-remaining: 0" ]; then
        echo "Rate limit exceeded"
        exit 1
      fi
      echo "latest-ref=$( curl -s https://api.github.com/repos/${{ inputs.repository }}/commits/${{ steps.chosen-ref.outputs.ref }} --header "Authorization: token ${{ inputs.token }}" | jq -r '.sha' )" >> $GITHUB_OUTPUT
      echo "repo-name=$( curl -s https://api.github.com/repos/${{ inputs.repository }} --header "Authorization: token ${{ inputs.token }}" | jq -r '.name' )" >> $GITHUB_OUTPUT
      cat $GITHUB_OUTPUT
  - name: Check latest-ref
    shell: bash
    run: |
      if [ "${{ steps.latest-ref.outputs.latest-ref }}" == "null" ]; then
        exit 1
      fi
  - name: Restore build from cache
    id: restore
    uses: actions/cache/restore@v3
    env:
      cache-name: cache-${{ steps.latest-ref.outputs.repo-name }}
    with:
      path: ${{ github.workspace }}/${{ steps.latest-ref.outputs.repo-name }}${{ steps.chosen-ref.outputs.ref }}/cache
      key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ steps.latest-ref.outputs.latest-ref }}
  - if: steps.restore.outputs.cache-hit != 'true'
    name: Checkout repo
    uses: actions/checkout@v2
    with:
      repository: ${{ inputs.repository }}
      ref: ${{ steps.chosen-ref.outputs.ref }}
      path: ${{ steps.latest-ref.outputs.repo-name }}${{ steps.chosen-ref.outputs.ref }}/git
      token: ${{ inputs.token }}
  - if: steps.restore.outputs.cache-hit != 'true'
    name: Build repo
    shell: ${{ inputs.shell }}
    run: |
      ${{ inputs.pre-build-command || ':' }} && cd $GITHUB_WORKSPACE/${{ steps.latest-ref.outputs.repo-name }}${{ steps.chosen-ref.outputs.ref }}  && mkdir -p build cache  && cd build && cmake -DCMAKE_INSTALL_PREFIX=../cache ${{ inputs.cmake-flags }} ../git  && sudo cmake --build . --target install  ${{ inputs.build-flags }}
  - if: steps.restore.outputs.cache-hit != 'true'
    name: Save build to cache
    id: save
    uses: actions/cache/save@v3
    env:
      cache-name: cache-${{ steps.latest-ref.outputs.repo-name }}
    with:
      path: ${{ github.workspace }}/${{ steps.latest-ref.outputs.repo-name }}${{ steps.chosen-ref.outputs.ref }}/cache
      key: ${{ steps.restore.outputs.cache-primary-key }}
  - name: Install
    shell: ${{ inputs.shell }}
    run: sudo cp -r $GITHUB_WORKSPACE/${{ steps.latest-ref.outputs.repo-name }}${{ steps.chosen-ref.outputs.ref }}/cache/* /usr/local/.
